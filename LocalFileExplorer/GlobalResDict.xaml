<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
					xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
					xmlns:theme="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero2">
	<!--#region ButtonTemplate1-->
	<SolidColorBrush x:Key="Button.MouseOver.Background"
					 Color="HotPink" />
	<SolidColorBrush x:Key="Button.MouseOver.Border"
					 Color="#FF3C7FB1" />
	<SolidColorBrush x:Key="Button.Pressed.Background"
					 Color="Pink" />
	<SolidColorBrush x:Key="Button.Pressed.Border"
					 Color="#FF2C628B" />
	<SolidColorBrush x:Key="Button.Disabled.Background"
					 Color="#FFF4F4F4" />
	<SolidColorBrush x:Key="Button.Disabled.Border"
					 Color="#FFADB2B5" />
	<SolidColorBrush x:Key="Button.Disabled.Foreground"
					 Color="#FF838383" />
	<ControlTemplate x:Key="ButtonTemplate1"
					 TargetType="{x:Type ButtonBase}">
		<Border x:Name="border"
				Background="{TemplateBinding Background}"
				BorderBrush="{TemplateBinding BorderBrush}"
				BorderThickness="{TemplateBinding BorderThickness}"
				SnapsToDevicePixels="true">
			<ContentPresenter x:Name="contentPresenter"
							  Focusable="False"
							  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
							  Margin="{TemplateBinding Padding}"
							  RecognizesAccessKey="True"
							  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
							  VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
		</Border>
		<ControlTemplate.Triggers>
			<Trigger Property="Button.IsDefaulted"
					 Value="true">
				<Setter Property="BorderBrush"
						TargetName="border"
						Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
			</Trigger>
			<Trigger Property="IsMouseOver"
					 Value="true">
				<Setter Property="Background"
						TargetName="border"
						Value="{StaticResource Button.MouseOver.Background}" />
				<Setter Property="BorderBrush"
						TargetName="border"
						Value="{StaticResource Button.MouseOver.Border}" />
			</Trigger>
			<Trigger Property="IsPressed"
					 Value="true">
				<Setter Property="Background"
						TargetName="border"
						Value="{StaticResource Button.Pressed.Background}" />
				<Setter Property="BorderBrush"
						TargetName="border"
						Value="{StaticResource Button.Pressed.Border}" />
			</Trigger>
			<Trigger Property="IsEnabled"
					 Value="false">
				<Setter Property="Background"
						TargetName="border"
						Value="{StaticResource Button.Disabled.Background}" />
				<Setter Property="BorderBrush"
						TargetName="border"
						Value="{StaticResource Button.Disabled.Border}" />
				<Setter Property="TextElement.Foreground"
						TargetName="contentPresenter"
						Value="{StaticResource Button.Disabled.Foreground}" />
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>
	<!--#endregion-->
	<!--#region TreeViewItemTemplate1-->
	<SolidColorBrush x:Key="TreeViewItem.TreeArrow.Static.Stroke"
					 Color="#FF818181" />
	<SolidColorBrush x:Key="TreeViewItem.TreeArrow.Static.Fill"
					 Color="#FFFFFFFF" />
	<SolidColorBrush x:Key="TreeViewItem.TreeArrow.MouseOver.Stroke"
					 Color="#FF27C7F7" />
	<SolidColorBrush x:Key="TreeViewItem.TreeArrow.MouseOver.Fill"
					 Color="#FFCCEEFB" />
	<SolidColorBrush x:Key="TreeViewItem.TreeArrow.Static.Checked.Stroke"
					 Color="#FF262626" />
	<SolidColorBrush x:Key="TreeViewItem.TreeArrow.Static.Checked.Fill"
					 Color="#FF595959" />
	<SolidColorBrush x:Key="TreeViewItem.TreeArrow.MouseOver.Checked.Stroke"
					 Color="#FF1CC4F7" />
	<SolidColorBrush x:Key="TreeViewItem.TreeArrow.MouseOver.Checked.Fill"
					 Color="#FF82DFFB" />
	<PathGeometry x:Key="TreeArrow"
				  Figures="M0,0 L0,6 L6,0 z" />
	<Style x:Key="ExpandCollapseToggleStyle"
		   TargetType="{x:Type ToggleButton}">
		<Setter Property="Focusable"
				Value="False" />
		<Setter Property="Width"
				Value="16" />
		<Setter Property="Height"
				Value="16" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ToggleButton}">
					<Border Background="Transparent"
							Height="16"
							Padding="5,5,5,5"
							Width="16">
						<Path x:Name="ExpandPath"
							  Data="{StaticResource TreeArrow}"
							  Fill="{StaticResource TreeViewItem.TreeArrow.Static.Fill}"
							  Stroke="{StaticResource TreeViewItem.TreeArrow.Static.Stroke}">
							<Path.RenderTransform>
								<RotateTransform Angle="135"
												 CenterY="3"
												 CenterX="3" />
							</Path.RenderTransform>
						</Path>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsChecked"
								 Value="True">
							<Setter Property="RenderTransform"
									TargetName="ExpandPath">
								<Setter.Value>
									<RotateTransform Angle="180"
													 CenterY="3"
													 CenterX="3" />
								</Setter.Value>
							</Setter>
							<Setter Property="Fill"
									TargetName="ExpandPath"
									Value="{StaticResource TreeViewItem.TreeArrow.Static.Checked.Fill}" />
							<Setter Property="Stroke"
									TargetName="ExpandPath"
									Value="{StaticResource TreeViewItem.TreeArrow.Static.Checked.Stroke}" />
						</Trigger>
						<Trigger Property="IsMouseOver"
								 Value="True">
							<Setter Property="Stroke"
									TargetName="ExpandPath"
									Value="{StaticResource TreeViewItem.TreeArrow.MouseOver.Stroke}" />
							<Setter Property="Fill"
									TargetName="ExpandPath"
									Value="{StaticResource TreeViewItem.TreeArrow.MouseOver.Fill}" />
						</Trigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsMouseOver"
										   Value="True" />
								<Condition Property="IsChecked"
										   Value="True" />
							</MultiTrigger.Conditions>
							<Setter Property="Stroke"
									TargetName="ExpandPath"
									Value="{StaticResource TreeViewItem.TreeArrow.MouseOver.Checked.Stroke}" />
							<Setter Property="Fill"
									TargetName="ExpandPath"
									Value="{StaticResource TreeViewItem.TreeArrow.MouseOver.Checked.Fill}" />
						</MultiTrigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<ControlTemplate x:Key="TreeViewItemTemplate1"
					 TargetType="{x:Type TreeViewItem}">
		<Grid>
			<Grid.ColumnDefinitions>
				<ColumnDefinition MinWidth="19"
								  Width="Auto" />
				<ColumnDefinition Width="Auto" />
				<ColumnDefinition Width="*" />
			</Grid.ColumnDefinitions>
			<Grid.RowDefinitions>
				<RowDefinition Height="Auto" />
				<RowDefinition />
			</Grid.RowDefinitions>
			<ToggleButton x:Name="Expander"
						  ClickMode="Press"
						  IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}}"
						  Style="{StaticResource ExpandCollapseToggleStyle}" />
			<Border x:Name="Bd"
					Background="{TemplateBinding Background}"
					BorderBrush="{TemplateBinding BorderBrush}"
					BorderThickness="{TemplateBinding BorderThickness}"
					Grid.Column="1"
					Padding="{TemplateBinding Padding}"
					SnapsToDevicePixels="true">
				<ContentPresenter x:Name="PART_Header"
								  ContentSource="Header"
								  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
								  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
			</Border>
			<ItemsPresenter x:Name="ItemsHost"
							Grid.Column="1"
							Grid.ColumnSpan="2"
							Grid.Row="1"
							Margin="-10,0,0,0" />
		</Grid>
		<ControlTemplate.Triggers>
			
			<Trigger Property="IsSelected"
					 Value="true">
				<Setter Property="Background"
						TargetName="Bd"
						Value="#A287F4"/>
				<Setter Property="Foreground"
						Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
			</Trigger>
			<Trigger Property="IsMouseOver"
					 Value="true">
				<Trigger.EnterActions>
					<BeginStoryboard>
						<Storyboard>
							<ColorAnimation Storyboard.TargetProperty="Background.(SolidColorBrush.Color)"
											To="#414141"
											Duration="0:0:0.2" />
						</Storyboard>
					</BeginStoryboard>
				</Trigger.EnterActions>
				<Trigger.ExitActions>
					<BeginStoryboard>
						<Storyboard>
							<ColorAnimation Storyboard.TargetProperty="Background.(SolidColorBrush.Color)"
											To="Transparent"
											Duration="0:0:0.1" />
						</Storyboard>
					</BeginStoryboard>
				</Trigger.ExitActions>
			</Trigger>
			<Trigger Property="IsExpanded"
					 Value="false">
				<Setter Property="Visibility"
						TargetName="ItemsHost"
						Value="Collapsed" />
			</Trigger>
			<Trigger Property="HasItems"
					 Value="false">
				<Setter Property="Visibility"
						TargetName="Expander"
						Value="Hidden" />
			</Trigger>
			<Trigger Property="IsEnabled"
					 Value="false">
				<Setter Property="Foreground"
						Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
			</Trigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsSelected"
							   Value="true" />
					<Condition Property="IsSelectionActive"
							   Value="false" />
				</MultiTrigger.Conditions>
				<Setter Property="Background"
						TargetName="Bd"
						Value="#6F6F6F" />
				<Setter Property="Foreground"
						Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightTextBrushKey}}" />
			</MultiTrigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>
	<!--#endregion-->
	<!--#region ComboBoxTemplate1-->
	<SolidColorBrush x:Key="ComboBox.Static.Background"
					 Color="Transparent" />
	<SolidColorBrush x:Key="ComboBox.Static.Border"
					 Color="#FFACACAC" />
	<SolidColorBrush x:Key="ComboBox.Static.Glyph"
					 Color="#FF606060" />
	<SolidColorBrush x:Key="ComboBox.Static.Editable.Background"
					 Color="Transparent" />
	<SolidColorBrush x:Key="ComboBox.Static.Editable.Border"
					 Color="#FFABADB3" />
	<SolidColorBrush x:Key="ComboBox.Static.Editable.Button.Background"
					 Color="Transparent" />
	<SolidColorBrush x:Key="ComboBox.Static.Editable.Button.Border"
					 Color="Transparent" />
	<SolidColorBrush x:Key="ComboBox.MouseOver.Background"
					 Color="Transparent" />
	<SolidColorBrush x:Key="ComboBox.MouseOver.Border"
					 Color="#FF7EB4EA" />
	<SolidColorBrush x:Key="ComboBox.MouseOver.Glyph"
					 Color="Indigo" />
	<SolidColorBrush x:Key="ComboBox.MouseOver.Editable.Background"
					 Color="Transparent" />
	<SolidColorBrush x:Key="ComboBox.MouseOver.Editable.Border"
					 Color="#FF7EB4EA" />
	<SolidColorBrush x:Key="ComboBox.MouseOver.Editable.Button.Background"
					 Color="Transparent" />
	<SolidColorBrush x:Key="ComboBox.MouseOver.Editable.Button.Border"
					 Color="#FF7EB4EA" />
	<SolidColorBrush x:Key="ComboBox.Pressed.Background"
					 Color="Transparent" />
	<SolidColorBrush x:Key="ComboBox.Pressed.Border"
					 Color="#FF569DE5" />
	<SolidColorBrush x:Key="ComboBox.Pressed.Glyph"
					 Color="Red" />
	<SolidColorBrush x:Key="ComboBox.Pressed.Editable.Background"
					 Color="#FFFFFFFF" />
	<SolidColorBrush x:Key="ComboBox.Pressed.Editable.Border"
					 Color="#FF569DE5" />
	<SolidColorBrush x:Key="ComboBox.Pressed.Editable.Button.Background"
					 Color="Transparent" />
	<SolidColorBrush x:Key="ComboBox.Pressed.Editable.Button.Border"
					 Color="#FF569DE5" />
	<SolidColorBrush x:Key="ComboBox.Disabled.Background"
					 Color="#FFF0F0F0" />
	<SolidColorBrush x:Key="ComboBox.Disabled.Border"
					 Color="#FFD9D9D9" />
	<SolidColorBrush x:Key="ComboBox.Disabled.Glyph"
					 Color="#FFBFBFBF" />
	<SolidColorBrush x:Key="ComboBox.Disabled.Editable.Background"
					 Color="#FFFFFFFF" />
	<SolidColorBrush x:Key="ComboBox.Disabled.Editable.Border"
					 Color="#FFBFBFBF" />
	<SolidColorBrush x:Key="ComboBox.Disabled.Editable.Button.Background"
					 Color="Transparent" />
	<SolidColorBrush x:Key="ComboBox.Disabled.Editable.Button.Border"
					 Color="Transparent" />
	<Style x:Key="ComboBoxToggleButton"
		   TargetType="{x:Type ToggleButton}">
		<Setter Property="OverridesDefaultStyle"
				Value="true" />
		<Setter Property="IsTabStop"
				Value="false" />
		<Setter Property="Focusable"
				Value="false" />
		<Setter Property="ClickMode"
				Value="Press" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ToggleButton}">
					<Border x:Name="templateRoot"
							Background="{StaticResource ComboBox.Static.Background}"
							BorderBrush="{StaticResource ComboBox.Static.Border}"
							BorderThickness="{TemplateBinding BorderThickness}"
							SnapsToDevicePixels="true">
						<Border x:Name="splitBorder"
								BorderBrush="Transparent"
								BorderThickness="1"
								HorizontalAlignment="Right"
								Margin="0"
								SnapsToDevicePixels="true"
								Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}">
							<Path x:Name="arrow"
								  Data="F1 M 0,0 L 2.667,2.66665 L 5.3334,0 L 5.3334,-1.78168 L 2.6667,0.88501 L0,-1.78168 L0,0 Z"
								  Fill="{StaticResource ComboBox.Static.Glyph}"
								  HorizontalAlignment="Center"
								  Margin="0"
								  VerticalAlignment="Center" />
						</Border>
					</Border>
					<ControlTemplate.Triggers>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}"
										   Value="true" />
								<Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}"
										   Value="false" />
								<Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}"
										   Value="false" />
								<Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}"
										   Value="true" />
							</MultiDataTrigger.Conditions>
							<Setter Property="Background"
									TargetName="templateRoot"
									Value="{StaticResource ComboBox.Static.Editable.Background}" />
							<Setter Property="BorderBrush"
									TargetName="templateRoot"
									Value="{StaticResource ComboBox.Static.Editable.Border}" />
							<Setter Property="Background"
									TargetName="splitBorder"
									Value="{StaticResource ComboBox.Static.Editable.Button.Background}" />
							<Setter Property="BorderBrush"
									TargetName="splitBorder"
									Value="{StaticResource ComboBox.Static.Editable.Button.Border}" />
						</MultiDataTrigger>
						<Trigger Property="IsMouseOver"
								 Value="true">
							<Setter Property="Fill"
									TargetName="arrow"
									Value="{StaticResource ComboBox.MouseOver.Glyph}" />
						</Trigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}"
										   Value="true" />
								<Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}"
										   Value="false" />
							</MultiDataTrigger.Conditions>
							<Setter Property="Background"
									TargetName="templateRoot"
									Value="{StaticResource ComboBox.MouseOver.Background}" />
							<Setter Property="BorderBrush"
									TargetName="templateRoot"
									Value="{StaticResource ComboBox.MouseOver.Border}" />
						</MultiDataTrigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}"
										   Value="true" />
								<Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}"
										   Value="true" />
							</MultiDataTrigger.Conditions>
							<Setter Property="Background"
									TargetName="templateRoot"
									Value="{StaticResource ComboBox.MouseOver.Editable.Background}" />
							<Setter Property="BorderBrush"
									TargetName="templateRoot"
									Value="{StaticResource ComboBox.MouseOver.Editable.Border}" />
							<Setter Property="Background"
									TargetName="splitBorder"
									Value="{StaticResource ComboBox.MouseOver.Editable.Button.Background}" />
							<Setter Property="BorderBrush"
									TargetName="splitBorder"
									Value="{StaticResource ComboBox.MouseOver.Editable.Button.Border}" />
						</MultiDataTrigger>
						<Trigger Property="IsPressed"
								 Value="true">
							<Setter Property="Fill"
									TargetName="arrow"
									Value="{StaticResource ComboBox.Pressed.Glyph}" />
						</Trigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}"
										   Value="true" />
								<Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}"
										   Value="false" />
							</MultiDataTrigger.Conditions>
							<Setter Property="Background"
									TargetName="templateRoot"
									Value="{StaticResource ComboBox.Pressed.Background}" />
							<Setter Property="BorderBrush"
									TargetName="templateRoot"
									Value="{StaticResource ComboBox.Pressed.Border}" />
						</MultiDataTrigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}"
										   Value="true" />
								<Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}"
										   Value="true" />
							</MultiDataTrigger.Conditions>
							<Setter Property="Background"
									TargetName="templateRoot"
									Value="{StaticResource ComboBox.Pressed.Editable.Background}" />
							<Setter Property="BorderBrush"
									TargetName="templateRoot"
									Value="{StaticResource ComboBox.Pressed.Editable.Border}" />
							<Setter Property="Background"
									TargetName="splitBorder"
									Value="{StaticResource ComboBox.Pressed.Editable.Button.Background}" />
							<Setter Property="BorderBrush"
									TargetName="splitBorder"
									Value="{StaticResource ComboBox.Pressed.Editable.Button.Border}" />
						</MultiDataTrigger>
						<Trigger Property="IsEnabled"
								 Value="false">
							<Setter Property="Fill"
									TargetName="arrow"
									Value="{StaticResource ComboBox.Disabled.Glyph}" />
						</Trigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}"
										   Value="false" />
								<Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}"
										   Value="false" />
							</MultiDataTrigger.Conditions>
							<Setter Property="Background"
									TargetName="templateRoot"
									Value="{StaticResource ComboBox.Disabled.Background}" />
							<Setter Property="BorderBrush"
									TargetName="templateRoot"
									Value="{StaticResource ComboBox.Disabled.Border}" />
						</MultiDataTrigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}"
										   Value="false" />
								<Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}"
										   Value="true" />
							</MultiDataTrigger.Conditions>
							<Setter Property="Background"
									TargetName="templateRoot"
									Value="{StaticResource ComboBox.Disabled.Editable.Background}" />
							<Setter Property="BorderBrush"
									TargetName="templateRoot"
									Value="{StaticResource ComboBox.Disabled.Editable.Border}" />
							<Setter Property="Background"
									TargetName="splitBorder"
									Value="{StaticResource ComboBox.Disabled.Editable.Button.Background}" />
							<Setter Property="BorderBrush"
									TargetName="splitBorder"
									Value="{StaticResource ComboBox.Disabled.Editable.Button.Border}" />
						</MultiDataTrigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<ControlTemplate x:Key="ComboBoxTemplate1"
					 TargetType="{x:Type ComboBox}">
		<Grid x:Name="templateRoot"
			  SnapsToDevicePixels="true">
			<Grid.ColumnDefinitions>
				<ColumnDefinition Width="*" />
				<ColumnDefinition MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}"
								  Width="0" />
			</Grid.ColumnDefinitions>
			<Popup x:Name="PART_Popup"
				   AllowsTransparency="true"
				   Grid.ColumnSpan="2"
				   IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
				   Margin="1"
				   Placement="Bottom"
				   PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}">
				<theme:SystemDropShadowChrome x:Name="shadow"
											  Color="Transparent"
											  MinWidth="{Binding ActualWidth, ElementName=templateRoot}"
											  MaxHeight="{TemplateBinding MaxDropDownHeight}">
					<Border x:Name="dropDownBorder"
							Background="Transparent"
							BorderBrush="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}"
							BorderThickness="1">
						<ScrollViewer x:Name="DropDownScrollViewer">
							<Grid x:Name="grid"
								  RenderOptions.ClearTypeHint="Enabled">
								<Canvas x:Name="canvas"
										HorizontalAlignment="Left"
										Height="0"
										VerticalAlignment="Top"
										Width="0">
									<Rectangle x:Name="opaqueRect"
											   Fill="{Binding Background, ElementName=dropDownBorder}"
											   Height="{Binding ActualHeight, ElementName=dropDownBorder}"
											   Width="{Binding ActualWidth, ElementName=dropDownBorder}" />
								</Canvas>
								<ItemsPresenter x:Name="ItemsPresenter"
												KeyboardNavigation.DirectionalNavigation="Contained"
												SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
							</Grid>
						</ScrollViewer>
					</Border>
				</theme:SystemDropShadowChrome>
			</Popup>
			<ToggleButton x:Name="toggleButton"
						  Background="{TemplateBinding Background}"
						  BorderBrush="{TemplateBinding BorderBrush}"
						  BorderThickness="{TemplateBinding BorderThickness}"
						  Grid.ColumnSpan="2"
						  IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
						  Style="{StaticResource ComboBoxToggleButton}" />
			<ContentPresenter x:Name="contentPresenter"
							  ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}"
							  ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
							  Content="{TemplateBinding SelectionBoxItem}"
							  ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
							  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
							  IsHitTestVisible="false"
							  Margin="{TemplateBinding Padding}"
							  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
							  VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
		</Grid>
		<ControlTemplate.Triggers>
			<Trigger Property="HasDropShadow"
					 SourceName="PART_Popup"
					 Value="true">
				<Setter Property="Margin"
						TargetName="shadow"
						Value="0,0,5,5" />
				<Setter Property="Color"
						TargetName="shadow"
						Value="#71000000" />
			</Trigger>
			<Trigger Property="HasItems"
					 Value="false">
				<Setter Property="Height"
						TargetName="dropDownBorder"
						Value="95" />
			</Trigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsGrouping"
							   Value="true" />
					<Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping"
							   Value="false" />
				</MultiTrigger.Conditions>
				<Setter Property="ScrollViewer.CanContentScroll"
						Value="false" />
			</MultiTrigger>
			<Trigger Property="ScrollViewer.CanContentScroll"
					 SourceName="DropDownScrollViewer"
					 Value="false">
				<Setter Property="Canvas.Top"
						TargetName="opaqueRect"
						Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}" />
				<Setter Property="Canvas.Left"
						TargetName="opaqueRect"
						Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}" />
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>
	<!--#endregion-->
	<!--#region UniTextBoxStyle-->
	<Style TargetType="{x:Type TextBox}"
		   x:Key="UniTextBoxStyle">
		<Setter Property="Background"
				Value="Transparent" />
		<Setter Property="Foreground"
				Value="White" />
		<Setter Property="CaretBrush"
				Value="LightGray" />
	</Style>
	<!--#endregion-->
</ResourceDictionary>